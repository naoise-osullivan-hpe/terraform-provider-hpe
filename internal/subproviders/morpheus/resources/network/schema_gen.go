// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package network

import (
	"context"
	"fmt"
	"github.com/HPE/terraform-provider-hpe/internal/subproviders/morpheus/morpheusvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func NetworkResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"active": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Activate (true) or disable (false) the network",
				MarkdownDescription: "Activate (true) or disable (false) the network",
			},
			"allow_static_override": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Allow IP Override",
				MarkdownDescription: "Allow IP Override",
			},
			"appliance_url_proxy_bypass": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Bypass Proxy for Appliance URL",
				MarkdownDescription: "Bypass Proxy for Appliance URL",
			},
			"assign_public_ip": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Assign Public IP",
				MarkdownDescription: "Assign Public IP",
			},
			"cidr": schema.StringAttribute{
				Optional:            true,
				Description:         "Network CIDR.",
				MarkdownDescription: "Network CIDR.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(), // force new,
				},
			},
			"cidr_ipv6": schema.StringAttribute{
				Optional:            true,
				Description:         "Network IPv6 CIDR.",
				MarkdownDescription: "Network IPv6 CIDR.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(), // force new,
				},
			},
			"cloud_id": schema.Int64Attribute{
				Required:            true,
				Description:         "Cloud (zone) id",
				MarkdownDescription: "Cloud (zone) id",
			},
			"config": schema.DynamicAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Configuration object. Settings vary by type. (Dynamic)",
				MarkdownDescription: "Configuration object. Settings vary by type. (Dynamic)",
				Validators: []validator.Dynamic{
					morpheusvalidators.ValidObjectMap(),
				},
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Description",
				MarkdownDescription: "Description",
			},
			"dhcp_server": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "DHCP Server enabled network",
				MarkdownDescription: "DHCP Server enabled network",
			},
			"dhcp_server_ipv6": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "IPv6 DHCP Server enabled network",
				MarkdownDescription: "IPv6 DHCP Server enabled network",
			},
			"display_name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Display Name",
				MarkdownDescription: "Display Name",
			},
			"dns_primary": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Primary DNS Server",
				MarkdownDescription: "Primary DNS Server",
			},
			"dns_primary_ipv6": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Primary IPv6 DNS Server",
				MarkdownDescription: "Primary IPv6 DNS Server",
			},
			"dns_secondary": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Secondary DNS Server",
				MarkdownDescription: "Secondary DNS Server",
			},
			"dns_secondary_ipv6": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Secondary IPv6 DNS Server",
				MarkdownDescription: "Secondary IPv6 DNS Server",
			},
			"gateway": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Network Gateway",
				MarkdownDescription: "Network Gateway",
			},
			"gateway_ipv6": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "IPv6 Network Gateway",
				MarkdownDescription: "IPv6 Network Gateway",
			},
			"group_id": schema.Int64Attribute{
				Required:            true,
				Description:         "Group (site) id",
				MarkdownDescription: "Group (site) id",
			},
			"id": schema.Int64Attribute{
				Computed:            true,
				Description:         "Network id",
				MarkdownDescription: "Network id",
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.UseStateForUnknown(),
				},
			},
			"ipv4enabled": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"ipv6enabled": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"labels": schema.SetAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Array of label strings, can be used for filtering.",
				MarkdownDescription: "Array of label strings, can be used for filtering.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Network name.",
				MarkdownDescription: "Network name.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(), // force new,
				},
			},
			"netmask_ipv6": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"network_domain_id": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Network domain id",
				MarkdownDescription: "Network domain id",
			},
			"network_proxy_id": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Network proxy id",
				MarkdownDescription: "Network proxy id",
			},
			"no_proxy": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Comma-separated list of ip addresses or name servers to exclude proxy traversal for. Typically locally routable servers are excluded.",
				MarkdownDescription: "Comma-separated list of ip addresses or name servers to exclude proxy traversal for. Typically locally routable servers are excluded.",
			},
			"pool_id": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Network Pool ID",
				MarkdownDescription: "Network Pool ID",
			},
			"pool_ipv6_id": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "IPv6 Network Pool ID",
				MarkdownDescription: "IPv6 Network Pool ID",
			},
			"resource_permissions": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"all": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Pass true to allow access all groups",
						MarkdownDescription: "Pass true to allow access all groups",
					},
					"group_ids": schema.SetAttribute{
						ElementType:         types.Int64Type,
						Optional:            true,
						Computed:            true,
						Description:         "Array of group (site) IDs that are allowed access",
						MarkdownDescription: "Array of group (site) IDs that are allowed access",
					},
				},
				CustomType: ResourcePermissionsType{
					ObjectType: types.ObjectType{
						AttrTypes: ResourcePermissionsValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"search_domains": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Search Domains",
				MarkdownDescription: "Search Domains",
			},
			"tenant_ids": schema.SetAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Computed:            true,
				Description:         "List of tenant account ids that are allowed access",
				MarkdownDescription: "List of tenant account ids that are allowed access",
			},
			"type_id": schema.Int64Attribute{
				Required:            true,
				Description:         "Network type id",
				MarkdownDescription: "Network type id",
			},
			"visibility": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Visibility, private or public.",
				MarkdownDescription: "Visibility, private or public.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"private",
						"public",
					),
				},
				Default: stringdefault.StaticString("private"),
			},
			"vlan_id": schema.Int64Attribute{
				Optional: true,
				Computed: true,
			},
			"zone_pool_id": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Zone pool id",
				MarkdownDescription: "Zone pool id",
			},
		},
	}
}

type NetworkModel struct {
	Active                  types.Bool               `tfsdk:"active"`
	AllowStaticOverride     types.Bool               `tfsdk:"allow_static_override"`
	ApplianceUrlProxyBypass types.Bool               `tfsdk:"appliance_url_proxy_bypass"`
	AssignPublicIp          types.Bool               `tfsdk:"assign_public_ip"`
	Cidr                    types.String             `tfsdk:"cidr"`
	CidrIpv6                types.String             `tfsdk:"cidr_ipv6"`
	CloudId                 types.Int64              `tfsdk:"cloud_id"`
	Config                  types.Dynamic            `tfsdk:"config"`
	Description             types.String             `tfsdk:"description"`
	DhcpServer              types.Bool               `tfsdk:"dhcp_server"`
	DhcpServerIpv6          types.Bool               `tfsdk:"dhcp_server_ipv6"`
	DisplayName             types.String             `tfsdk:"display_name"`
	DnsPrimary              types.String             `tfsdk:"dns_primary"`
	DnsPrimaryIpv6          types.String             `tfsdk:"dns_primary_ipv6"`
	DnsSecondary            types.String             `tfsdk:"dns_secondary"`
	DnsSecondaryIpv6        types.String             `tfsdk:"dns_secondary_ipv6"`
	Gateway                 types.String             `tfsdk:"gateway"`
	GatewayIpv6             types.String             `tfsdk:"gateway_ipv6"`
	GroupId                 types.Int64              `tfsdk:"group_id"`
	Id                      types.Int64              `tfsdk:"id"`
	Ipv4enabled             types.Bool               `tfsdk:"ipv4enabled"`
	Ipv6enabled             types.Bool               `tfsdk:"ipv6enabled"`
	Labels                  types.Set                `tfsdk:"labels"`
	Name                    types.String             `tfsdk:"name"`
	NetmaskIpv6             types.String             `tfsdk:"netmask_ipv6"`
	NetworkDomainId         types.Int64              `tfsdk:"network_domain_id"`
	NetworkProxyId          types.Int64              `tfsdk:"network_proxy_id"`
	NoProxy                 types.String             `tfsdk:"no_proxy"`
	PoolId                  types.Int64              `tfsdk:"pool_id"`
	PoolIpv6Id              types.Int64              `tfsdk:"pool_ipv6_id"`
	ResourcePermissions     ResourcePermissionsValue `tfsdk:"resource_permissions"`
	SearchDomains           types.String             `tfsdk:"search_domains"`
	TenantIds               types.Set                `tfsdk:"tenant_ids"`
	TypeId                  types.Int64              `tfsdk:"type_id"`
	Visibility              types.String             `tfsdk:"visibility"`
	VlanId                  types.Int64              `tfsdk:"vlan_id"`
	ZonePoolId              types.Int64              `tfsdk:"zone_pool_id"`
}

var _ basetypes.ObjectTypable = ResourcePermissionsType{}

type ResourcePermissionsType struct {
	basetypes.ObjectType
}

func (t ResourcePermissionsType) Equal(o attr.Type) bool {
	other, ok := o.(ResourcePermissionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ResourcePermissionsType) String() string {
	return "ResourcePermissionsType"
}

func (t ResourcePermissionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if in.IsUnknown() {
		return NewResourcePermissionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewResourcePermissionsValueNull(), nil
	}

	attributes := in.Attributes()

	allAttribute, ok := attributes["all"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`all is missing from object`)

		return nil, diags
	}

	allVal, ok := allAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`all expected to be basetypes.BoolValue, was: %T`, allAttribute))
	}

	groupIdsAttribute, ok := attributes["group_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group_ids is missing from object`)

		return nil, diags
	}

	groupIdsVal, ok := groupIdsAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group_ids expected to be basetypes.SetValue, was: %T`, groupIdsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ResourcePermissionsValue{
		All:      allVal,
		GroupIds: groupIdsVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewResourcePermissionsValueNull() ResourcePermissionsValue {
	return ResourcePermissionsValue{
		state: attr.ValueStateNull,
	}
}

func NewResourcePermissionsValueUnknown() ResourcePermissionsValue {
	return ResourcePermissionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewResourcePermissionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ResourcePermissionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ResourcePermissionsValue Attribute Value",
				"While creating a ResourcePermissionsValue value, a missing attribute value was detected. "+
					"A ResourcePermissionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResourcePermissionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ResourcePermissionsValue Attribute Type",
				"While creating a ResourcePermissionsValue value, an invalid attribute value was detected. "+
					"A ResourcePermissionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResourcePermissionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ResourcePermissionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ResourcePermissionsValue Attribute Value",
				"While creating a ResourcePermissionsValue value, an extra attribute value was detected. "+
					"A ResourcePermissionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ResourcePermissionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewResourcePermissionsValueUnknown(), diags
	}

	allAttribute, ok := attributes["all"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`all is missing from object`)

		return NewResourcePermissionsValueUnknown(), diags
	}

	allVal, ok := allAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`all expected to be basetypes.BoolValue, was: %T`, allAttribute))
	}

	groupIdsAttribute, ok := attributes["group_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group_ids is missing from object`)

		return NewResourcePermissionsValueUnknown(), diags
	}

	groupIdsVal, ok := groupIdsAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group_ids expected to be basetypes.SetValue, was: %T`, groupIdsAttribute))
	}

	if diags.HasError() {
		return NewResourcePermissionsValueUnknown(), diags
	}

	return ResourcePermissionsValue{
		All:      allVal,
		GroupIds: groupIdsVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewResourcePermissionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ResourcePermissionsValue {
	object, diags := NewResourcePermissionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewResourcePermissionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ResourcePermissionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewResourcePermissionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewResourcePermissionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewResourcePermissionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewResourcePermissionsValueMust(ResourcePermissionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ResourcePermissionsType) ValueType(ctx context.Context) attr.Value {
	return ResourcePermissionsValue{}
}

var _ basetypes.ObjectValuable = ResourcePermissionsValue{}

type ResourcePermissionsValue struct {
	All      basetypes.BoolValue `tfsdk:"all"`
	GroupIds basetypes.SetValue  `tfsdk:"group_ids"`
	state    attr.ValueState
}

func (v ResourcePermissionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["all"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["group_ids"] = basetypes.SetType{
		ElemType: types.Int64Type,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.All.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["all"] = val

		val, err = v.GroupIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group_ids"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ResourcePermissionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ResourcePermissionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ResourcePermissionsValue) String() string {
	return "ResourcePermissionsValue"
}

func (v ResourcePermissionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupIdsVal basetypes.SetValue
	switch {
	case v.GroupIds.IsUnknown():
		groupIdsVal = types.SetUnknown(types.Int64Type)
	case v.GroupIds.IsNull():
		groupIdsVal = types.SetNull(types.Int64Type)
	default:
		var d diag.Diagnostics
		groupIdsVal, d = types.SetValue(types.Int64Type, v.GroupIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"all": basetypes.BoolType{},
			"group_ids": basetypes.SetType{
				ElemType: types.Int64Type,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"all": basetypes.BoolType{},
		"group_ids": basetypes.SetType{
			ElemType: types.Int64Type,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"all":       v.All,
			"group_ids": groupIdsVal,
		})

	return objVal, diags
}

func (v ResourcePermissionsValue) Equal(o attr.Value) bool {
	other, ok := o.(ResourcePermissionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.All.Equal(other.All) {
		return false
	}

	if !v.GroupIds.Equal(other.GroupIds) {
		return false
	}

	return true
}

func (v ResourcePermissionsValue) Type(ctx context.Context) attr.Type {
	return ResourcePermissionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ResourcePermissionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"all": basetypes.BoolType{},
		"group_ids": basetypes.SetType{
			ElemType: types.Int64Type,
		},
	}
}
