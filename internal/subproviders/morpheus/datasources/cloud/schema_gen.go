// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package cloud

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CloudDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"code": schema.StringAttribute{
				Computed:            true,
				Description:         "Optional code for use with policies",
				MarkdownDescription: "Optional code for use with policies",
			},
			"costing_mode": schema.StringAttribute{
				Computed:            true,
				Description:         "The costing mode of the cloud",
				MarkdownDescription: "The costing mode of the cloud",
			},
			"external_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The external id of the cloud",
				MarkdownDescription: "The external id of the cloud",
			},
			"group_ids": schema.SetAttribute{
				ElementType:         types.Int64Type,
				Computed:            true,
				Description:         "The ids of the groups granted access to the cloud",
				MarkdownDescription: "The ids of the groups granted access to the cloud",
			},
			"guidance_mode": schema.StringAttribute{
				Computed:            true,
				Description:         "The guidance mode of the cloud",
				MarkdownDescription: "The guidance mode of the cloud",
			},
			"id": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Morpheus ID of the Object being referenced",
				MarkdownDescription: "Morpheus ID of the Object being referenced",
				Validators: []validator.Int64{
					int64validator.ConflictsWith(path.Expressions{
						path.MatchRoot("name"),
					}...),
				},
			},
			"inventory_level": schema.StringAttribute{
				Computed:            true,
				Description:         "The inventory level of the cloud",
				MarkdownDescription: "The inventory level of the cloud",
			},
			"labels": schema.SetAttribute{
				ElementType:         types.StringType,
				Computed:            true,
				Description:         "The organization labels associated with the cloud",
				MarkdownDescription: "The organization labels associated with the cloud",
			},
			"location": schema.StringAttribute{
				Computed:            true,
				Description:         "Optional location for your cloud",
				MarkdownDescription: "Optional location for your cloud",
			},
			"name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The name of the Morpheus cloud",
				MarkdownDescription: "The name of the Morpheus cloud",
				Validators: []validator.String{
					stringvalidator.ConflictsWith(path.Expressions{
						path.MatchRoot("id"),
					}...),
				},
			},
			"time_zone": schema.StringAttribute{
				Computed:            true,
				Description:         "The time zone of the cloud",
				MarkdownDescription: "The time zone of the cloud",
			},
		},
	}
}

type CloudModel struct {
	Code           types.String `tfsdk:"code"`
	CostingMode    types.String `tfsdk:"costing_mode"`
	ExternalId     types.String `tfsdk:"external_id"`
	GroupIds       types.Set    `tfsdk:"group_ids"`
	GuidanceMode   types.String `tfsdk:"guidance_mode"`
	Id             types.Int64  `tfsdk:"id"`
	InventoryLevel types.String `tfsdk:"inventory_level"`
	Labels         types.Set    `tfsdk:"labels"`
	Location       types.String `tfsdk:"location"`
	Name           types.String `tfsdk:"name"`
	TimeZone       types.String `tfsdk:"time_zone"`
}
